---
title: "The state of Raster Data"
subtitle: "Updates since 2023"
author:
  - name: Rafael Schouten
    orcid:
    email: rafaelschouten@gmail.com
    affiliation:
      - name: NINA Oslo
date: "2025-01-06"
engine: julia
format:
  revealjs:
    theme: [dark, style.scss] # beige blood dark default league moon night serif simple sky solarized
    incremental: true
    toc: true
    toc-depth: 1
    slide-number: true
    overview: true
    code-line-numbers: false
    highlight-style: ayu
execute:
    echo: true
---

```{julia}
#| echo: false
if !haskey(ENV, "RASTERDATASOURCES_PATH")
    ENV["RASTERDATASOURCES_PATH"] = tempdir();
end
```

# Raster data ecosystem

```{mermaid}
flowchart LR
  DiskArrays.jl-->ArchGDAL.jl
  DiskArrays.jl-->Zarr.jl
  Zarr.jl-->ZarrDatasets.jl
  CommonDataModel.jl-->NCDatasets.jl
  CommonDataModel.jl-->ZarrDatasets.jl
  CommonDataModel.jl-->GRIBDatasets.jl
  DiskArrays.jl-->NCDatasets.jl
  DiskArrays.jl-->ZarrDatasets.jl
  DiskArrays.jl-->GRIBDatasets.jl
  DiskArrays.jl-->NetCDF.jl
  NCDatasets.jl-->Rasters.jl
  ZarrDatasets.jl-->Rasters.jl
  GRIBDatasets.jl-->Rasters.jl
  Extents.jl-->GeoInterface.jl
  Extents.jl-->DimensionalData.jl
  GeoInterface.jl-->Rasters.jl
  DimensionalData.jl-->Rasters.jl
  NetCDF.jl-->YAXArrays.jl
  Zarr.jl-->YAXArrays.jl
  ArchGDAL.jl-->YAXArrays.jl
  DimensionalData.jl-->YAXArrays.jl
  Rasters.jl-->RemoteSensingToolkit.jl
```

# DimensionalData.jl

Named dimensions and lookups for arrays

## DimensionalData.jl News: Ecosystem

- YAXArrays.jl is now DD compatible
- PyramidScheme.jl is built on DimensionalData.jl
- Ecosystem package interop is now easy: `Raster(yaxarray)` works

## DimensionalData.jl News: `groupby`

Group temporal data by month
```{julia}
using DimensionalData, Dates, Statistics
A = rand(X(1:0.1:20), Y(1:20), Ti(DateTime(2000):Day(3):DateTime(2003)));
groups = groupby(A, Ti => month)
```

---

```{julia}
groupmeans = mean.(groups) # Take the monthly mean
```

## DimensionalData.jl News: `@d` macro 

Dimension-aware broadcasts

```{julia}
using DimensionalData
da1 = fill(2, X(3))
da2 = fill(2, Y(4), X(3))
```

---

Base broadcast fails:
```{julia}
#| error: true
da1 .* da2
```

---

`@d` broadcast works:
```{julia}
@d da1 .* da2
```

## DimensionalData.jl News: AlgebraOfGraphics.jl integration 

```{julia}
using AlgebraOfGraphics, CairoMakie
A = rand(X(1:5); name=:test)
data(A) * mapping(X, :test) * visual(Lines) |> draw
```

## `DimIndices` and `DimSelectors` indexing:

```{julia}
A = rand(X(1:20), Y(1:20))
B = zeros(X(5:2:10), Y(3:3:12))
```

```{julia}
DimIndices(B)
```

```{julia}
DimSelectors(B)
```
We can index directly with these:

```{julia}
A[DimIndices(B)]
```

```{julia}
A[DimSelectors(B)]
```

## Extent indexing
```{julia}
A[extent(B)]
```

## Python Xarray integration (thanks `@JamesWrigley`)

## DimensionalData.jl Roadmap

- PR: Any Tables.jl object to `DimStack`
- PR: Interpolations.jl extension
- `combine` for `groupby` 
- lazy `GroupBy` for DiskArrays.jl use-cases

# DiskArrays.jl

Lazy disk and network reads of chunked arrays. 

## DiskArrays.jl News

Interface now implemented in:

- ArchGDAL.jl
- Zarr.jl
- NCDatasets.jl
- ZarrDatasets.jl
- GRIBDatasets.jl (partially)
- NetCDF.jl
- Rasters.jl
- YAXArrays.jl
- PyramidScheme.jl

## DiskArrays.jl News

- Major structural update to accomodate NCDatasets.jl
- Many bugfixes
- Lazy concatenation with `ConcatDiskArray`
- Caching with `DiskArrays.cache`
- DiskArrayEngine.jl for advanced use cases

## DiskArrays.jl Issues

- Slow iteration
- Some missing Base implementations
- Some correctness bugs

# CommonDataModel.jl

Unites CF standards and dataset access accross many raster data types

Developed by `@AlexanderBaarth` 

## CommonDataModel.jl Example

## CommonDataModel.jl News

Implemented in:
- NCDatasets.jl
- GRIBDatasets.jl
- ZarrDatasets.jl
- TiffDatasets.jl

## CommonDataModel.jl Issues

- `CommonDataModel.CFVariable` is not yet DiskArays.jl compatible
- `crs` is not yet included in the interface

# Rasters.jl

Builds on:
- DimensionalData.jl
- DiskArrays.jl 
- CommonDataModel.jl 

To define container objects for all raster data: 
- `Raster`
- `RasterStack`
- `RasterSeries`

And common GIS methods on these objects

## Rasters News: Performance

Thanks to `@asingvi` for setting this up.

[![image]](https://github.com/user-attachments/assets/1c6c56ac-4c5a-4096-984d-15bf2783682c)

Benchmarks where Rasters.jl is slower than another tool are now considered bugs


## Rasters News: CommonDataModel.jl integration 

Thanks `@tcarion` !

- GRIB souce via GRIBDatasets.jl (thanks again `@tcarion`)
- Zarr source via ZarrDatasets.jl (thanks `@felixcremer`)

```{julia}
#| error: true
using Rasters, ZarrDatasets
path = "https://s3.bgc-jena.mpg.de:9000/esdl-esdc-v3.0.2/esdc-16d-2.5deg-46x72x1440-3.0.2.zarr"
zraster = Raster(path; name="air_temperature_2m")
```

<!-- File types                      | Package         | Write    
------------------------------- | ----------      | -----
Grib (read only)                | GRIBDatasets.jl | no 
Zarr (PR nearly done!)          | ZarrDatasets.jl | no 
Netcdf/hdf5                     | NCDatasets.jl   | yes 
grd (simple Mmap data from R)   | native          | yes 
GeoTIFF and everything else     | ArchGDAL.jl     | yes  -->

## Rasters.jl News: Chunk setting

```{julia}
using Rasters, RasterDataSources, ArchGDAL, NCDatasets, DiskArrays
bioclim5 = Raster(WorldClim{BioClim}, 5);
```

Write files with `chunks` keyword:
```{julia}
write("rechunked_bioclim5.tif", bioclim5; chunks=(X(256), Y(256)), force=true)
write("rechunked_bioclim5.nc",  bioclim5; chunks=(X(256), Y(256)), force=true)
```

--- 

Read tif lazily and check the the chunk pattern:
```{julia}
DiskArrays.eachchunk(Raster("rechunked_bioclim5.tif"; lazy=true))
```

And the same for netcdf:
```{julia}
DiskArrays.eachchunk(Raster("rechunked_bioclim5.nc"; lazy=true))
```

- Optimised and improved `extract` (`@rafaqz` and `@tiemvanderdeure`)
- Fast `cellarea` (thanks `@tiemvanderdeure`)

## Rasters.jl Roadmap: PRs about to merge

- Even faster everything:
  - `mosaic`
  - `aggregate`
  - `extract` lines
  - `zonal` lines
- Standardised missing value and scale/offset handling accross all sources
- Better `create` methods for easier definition of empty `Raster` and `RasterStack`

```julia
create("test.tif"; res=missingval=NaN, fill=0.0) do A
    # Work on lazy opened file here...
end
```

## Rasters.jl Roadmap: planned
- All methods working lazily with DiskArrays.jl
- Unit handling for data and lookup values
- Zarr writer
- Other YAXArrays.jl functionality? 
- Native `resample`?


## GeoMakie.jl: Rasters integration

Plot rasters in any projection.  Thanks `@asingvi`

```{julia}
using GeoMakie
A = Raster(WorldClim{BioClim}, 5)
Makie.heatmap(A; axis=(; type=GeoAxis, dest="+proj=ortho +lon_0=19 +lat_0=72"))
```

## RemoteSensingToolbox

[RemoteSensingToolbox.jl](https://github.com/JoshuaBillson/RemoteSensingToolbox.jl)

```{julia}
#using RemoteSensingToolbox, Rasters
#src = Landsat8("data/LC08_L2SP_043024_20200802_20200914_02_T1")
#stack = Raster(src, :clouds; lazy=false)
#true_color(Landsat8, stack)
```